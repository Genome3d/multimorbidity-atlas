#! /usr/bin/env python

import sys
import csv
import os
import argparse
import sqlite3
import multiprocessing
import codes3d

"""
Find common eGenes among traits and calculate the ratio of occurrence.
Takes in as input significant (FDR < 0.05)spatial eQTL SNP-gene interactions
for each GWAS Catalog trait.
"""

def resolve_output_fp(input_fp, output_fp):
    print('Resolving IO parameters..')
    resolved_output_fp = ''
    if output_fp == 'NA':
        resolved_output_fp = input_fp
    else:
        resolved_output_fp = output_fp
    if not resolved_output_fp.endswith('/'):
        resolved_output_fp = resolved_output_fp + '/'
    if not os.path.isdir(resolved_output_fp):
        os.mkdir(resolved_output_fp)
    print(resolved_output_fp)
    return resolved_output_fp
    
def get_trait_snps(snpdir):
    """Extract SNPs associated with GWAS traits.
    
    Args: ../../data/trait_snps/, an output of extract_gwas_snps.py, containing
        GWAS trait SNPs.

    Output: traits, a dictionary,
        {acne: ['rs12345', 'rs23456'],
         obesity: []
        }

    """
    _,_,t_files = next(os.walk(snpdir), (None, None, []))
    traits = {}
    for trait_file in t_files:
        trait = trait_file[:len(trait_file)-4]
        if os.path.isfile(os.path.join(snpdir, trait_file)):
            traits[trait] = []
            tfile = open(os.path.join(snpdir, trait_file), 'r')
            snps= csv.reader(tfile, delimiter = '\t') 
            for line in snps:
                traits[trait].append(line[0])
    return(traits)

def get_eqtls(trait_snps, eqtlsDB_fp, output_fp):
    """Get eQTLs for GWAS traits.

    Args:
        trait_snps: dictionary of trait SNPs from get_trait_snps
        eqtlsDB_fp: filepath for spatial_eqtls.db
        output_fp: desired output directory

    Output:
        Directories for each trait
        eqtls.txt files containing eQTL-eGene interaction data
    """
    conn = sqlite3.connect(eqtlsDB_fp)
    conn.text_factory = str
    cur = conn.cursor()
    done_snps = {}
    non_eqtls = []
    print('Finding eQTLs for ...')
    for trait in sorted(trait_snps.keys()):
        trait_dict = {}
        not_eqtls = []
        print('\t ' + trait + '\t ' + str(len(trait_snps[trait])) + ' SNPs')
        for snp in trait_snps[trait]:
            if snp in done_snps:
                trait_dict[snp] = done_snps[snp]
            elif snp in non_eqtls:
                not_eqtls.append(snp)
            else:
                cur.execute("SELECT * FROM eqtls WHERE snp=?", (snp,))
                eqtls = cur.fetchall()
                if eqtls:
                    trait_dict[snp] = eqtls
                    done_snps[snp] = eqtls #Cache of querried SNPs
                else:
                    non_eqtls.append(snp)
                    not_eqtls.append(snp)
        trait_dir = os.path.join(output_fp, trait)
        if not os.path.isdir(trait_dir):
            os.mkdir(trait_dir)
        print('\t\t ' + str(len(trait_dict)) + ' eQTLs')
        print('\t\t ' + str(len(not_eqtls)) + ' non-eQTLs')
        efile = open(os.path.join(trait_dir, 'eqtls.txt'), 'w')
        ewriter = csv.writer(efile, delimiter = '\t')
        for snp in trait_dict:
            ewriter.writerows(trait_dict[snp])

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description = "")
    parser.add_argument("-i", "--input", required = False, \
                        default="../../data/trait_snps/",
                        help = "Directory of trait files containing SNP" +\
                        "rsIDs, one per line.") 
    parser.add_argument("-e", "--eqtlDB",
                        default = "../../results/spatial_eqtls.db", 
                        help = "Filepath of spatial_eqtls.db generated by init_db.py") 
    parser.add_argument("-o", "--output", default = "../../results/trait_eqtls", \
                            help = "Output directory") 
    args = parser.parse_args()
    snpdir = args.input
    eqtlsDB_fp = args.eqtlDB
    output_fp = resolve_output_fp(args.input, args.output)
    trait_snps = get_trait_snps(snpdir)
    get_eqtls(trait_snps, eqtlsDB_fp, output_fp)
